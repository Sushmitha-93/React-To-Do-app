{"version":3,"sources":["logo.svg","components/todoItem.jsx","components/todoList.jsx","components/todoInsert.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoItem","_ref","item","onDelete","onCheck","react_default","a","createElement","class","todoClass","done","getTodoItemClass","className","type","checked","onClick","id","value","TodoList","props","todoList","map","src_components_todoItem","TodoInsert","onInsert","onSubmit","event","preventDefault","document","getElementById","autoComplete","placeholder","App","state","handleOnInsert","newToDo","console","log","_this","Object","toConsumableArray","listId","length","unshift","setState","handleOnDelete","itemId","itemIndex","findIndex","splice","handleOnCheck","todoItem","push","components_todoInsert","this","components_todoList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd62b236.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport \"./todoItem.css\";\r\n\r\nconst TodoItem = ({ item, onDelete, onCheck }) => {\r\n  return (\r\n    <li class={getTodoItemClass()}>\r\n      <input\r\n        className=\"mr-2\"\r\n        type=\"checkbox\"\r\n        checked={item.done}\r\n        onClick={() => {\r\n          onCheck(item.id);\r\n        }}\r\n      />\r\n      {item.value}\r\n      <button\r\n        type=\"button\"\r\n        className=\"close\"\r\n        onClick={() => {\r\n          {\r\n            onDelete(item.id);\r\n          }\r\n        }}\r\n      >\r\n        &times;\r\n      </button>\r\n    </li>\r\n  );\r\n\r\n  function getTodoItemClass() {\r\n    let todoClass = \"todoItem list-group-item \";\r\n    todoClass += item.done ? \"done\" : \"undone\";\r\n    return todoClass;\r\n  }\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./todoItem\";\r\n\r\nconst TodoList = props => {\r\n  return props.todoList.map(item => (\r\n    <TodoItem item={item} onDelete={props.onDelete} onCheck={props.onCheck} />\r\n  ));\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\r\nimport \"./todoInsert.css\";\r\n\r\nconst TodoInsert = ({ onInsert }) => {\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        event.preventDefault();\r\n        onInsert(document.getElementById(\"todoIns\").value);\r\n        document.getElementById(\"todoIns\").value = \"\";\r\n      }}\r\n      autoComplete=\"off\"\r\n    >\r\n      <div class=\"input-group\">\r\n        <input\r\n          type=\"text\"\r\n          id=\"todoIns\"\r\n          className=\"todoInput form-control\"\r\n          placeholder=\"add a new Todo..\"\r\n        />\r\n        <div class=\"input-group-append\">\r\n          <button class=\"btn btn-primary\" type=\"submit\">\r\n            +\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoInsert;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport TodoList from \"./components/todoList\";\nimport TodoInsert from \"./components/todoInsert\";\n\nclass App extends Component {\n  state = {\n    todoList: [\n      { id: 1, value: \"Learn React\", done: false },\n      { id: 2, value: \"Create To-do app\", done: false },\n      { id: 3, value: \"Go shopping\", done: false }\n    ],\n    id: 4\n  };\n\n  handleOnInsert = newToDo => {\n    console.log(\"handleOnInsert \", newToDo);\n    let id = this.state.id;\n    let todoList = [...this.state.todoList];\n    let listId = todoList.length === 0 ? (id = 1) : id;\n    id++;\n    todoList.unshift({ id: listId, value: newToDo, done: false });\n    this.setState({ todoList, id });\n  };\n\n  handleOnDelete = itemId => {\n    console.log(\"handle Delete \", itemId);\n    let todoList = [...this.state.todoList];\n    let itemIndex = todoList.findIndex(item => item.id === itemId);\n    todoList.splice(itemIndex, 1);\n    this.setState({ todoList });\n  };\n\n  handleOnCheck = itemId => {\n    console.log(\"handleOnCheck\");\n    let todoList = [...this.state.todoList];\n    let itemIndex = todoList.findIndex(item => item.id === itemId);\n    todoList[itemIndex].done = !todoList[itemIndex].done;\n    let todoItem = todoList[itemIndex];\n    todoList.splice(itemIndex, 1);\n    todoItem.done ? todoList.push(todoItem) : todoList.unshift(todoItem);\n    this.setState({ todoList });\n  };\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <br />\n        <h1 className=\"text-center\">To-Do List</h1>\n        <br />\n        <TodoInsert onInsert={this.handleOnInsert} />\n        <br />\n        <TodoList\n          todoList={this.state.todoList}\n          onDelete={this.handleOnDelete}\n          onCheck={this.handleOnCheck}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}